diff --git a/CodeEditor/Form1.Designer.cs b/CodeEditor/Form1.Designer.cs
index 5f95706..15b0372 100644
--- a/CodeEditor/Form1.Designer.cs
+++ b/CodeEditor/Form1.Designer.cs
@@ -404,6 +404,8 @@ namespace CodeEditor
             this.fastColoredTextBox1.TabIndex = 0;
             this.fastColoredTextBox1.Zoom = 100;
             this.fastColoredTextBox1.TextChanged += new System.EventHandler<FastColoredTextBoxNS.TextChangedEventArgs>(this.fastColoredTextBox1_TextChanged);
+            this.fastColoredTextBox1.LineInserted += new System.EventHandler<FastColoredTextBoxNS.LineInsertedEventArgs>(FastColoredTextBox1_LineInserted);
+            this.fastColoredTextBox1.LineRemoved += new System.EventHandler<FastColoredTextBoxNS.LineRemovedEventArgs>(FastColoredTextBox1_LineRemoved);
             this.fastColoredTextBox1.PreviewKeyDown += new System.Windows.Forms.PreviewKeyDownEventHandler(this.fastColoredTextBox1_PreviewKeyDown);
             // 
             // tree
diff --git a/CodeEditor/Form1.cs b/CodeEditor/Form1.cs
index 2811cf3..36769f8 100644
--- a/CodeEditor/Form1.cs
+++ b/CodeEditor/Form1.cs
@@ -101,10 +101,14 @@ namespace CodeEditor
 
             //obsługa zdarzenia TextChanged
             fastColoredTextBox1.TextChanged += new EventHandler<TextChangedEventArgs>(fastColoredTextBox1_TextChanged);
+            fastColoredTextBox1.LineInserted += FastColoredTextBox1_LineInserted;
+            fastColoredTextBox1.LineRemoved += FastColoredTextBox1_LineRemoved;
             fastColoredTextBox1.Dock = DockStyle.Fill;
             fastColoredTextBox1.AutoCompleteBrackets = true;
 
         }
+
+
         private void CloseTabButton_Click(object sender, EventArgs e)
         {
             Button closeButton = (Button)sender;
@@ -369,6 +373,8 @@ namespace CodeEditor
 
                 //obsługa zdarzenia TextChanged
                 fastColoredTextBox1.TextChanged += new System.EventHandler<FastColoredTextBoxNS.TextChangedEventArgs>(fastColoredTextBox1_TextChanged);
+                fastColoredTextBox1.LineInserted += FastColoredTextBox1_LineInserted;
+                fastColoredTextBox1.LineRemoved += FastColoredTextBox1_LineRemoved;
                 fastColoredTextBox1.Dock = DockStyle.Fill;
                 fastColoredTextBox1.AutoCompleteBrackets = true;
             }
diff --git a/CodeEditor/SyntaxHighlighting.cs b/CodeEditor/SyntaxHighlighting.cs
index 0790185..af85583 100644
--- a/CodeEditor/SyntaxHighlighting.cs
+++ b/CodeEditor/SyntaxHighlighting.cs
@@ -49,6 +49,7 @@ namespace CodeEditor
         Place caretPlace;
         Range stringRange;
         Range commentRange;
+        Dictionary<FastColoredTextBox, List<TokenizerLineState>> lineStateDictionary;
         private void fastColoredTextBox1_TextChanged(object sender, TextChangedEventArgs e)
         {
             textBox = sender as FastColoredTextBox;
@@ -67,8 +68,68 @@ namespace CodeEditor
             }
         }
 
+        private void FastColoredTextBox1_LineRemoved(object sender, LineRemovedEventArgs e)
+        {
+            textBox = (FastColoredTextBox)sender;
+            List<TokenizerLineState> vls;
+            if (lineStateDictionary.TryGetValue(textBox, out vls))
+            {
+                vls.RemoveRange(e.Index, e.Count);
+            }
+            else
+            {
+                // Nie powinno się to zdarzyć
+                new InvalidOperationException("Usuwanie linii z nieistniejącego kolorowania");
+            }
+            RunUpdateTokenizerFromLine(e.Index, vls, textBox);
+        }
+
+        private void FastColoredTextBox1_LineInserted(object sender, LineInsertedEventArgs e)
+        {
+            textBox = (FastColoredTextBox)sender;
+            List<TokenizerLineState> vls;
+            if (lineStateDictionary.TryGetValue(textBox, out vls))
+            {
+                vls.InsertRange(e.Index, new TokenizerLineState[e.Count]);
+                RunUpdateTokenizerFromLine(e.Index, vls, textBox);
+            }
+            else
+            {
+                vls = new List<TokenizerLineState>();
+                vls.AddRange(new TokenizerLineState[textBox.LinesCount]);
+                lineStateDictionary.Add(textBox, vls);
+                RunUpdateTokenizerFromLine(0, vls, textBox);
+            }            
+        }
+
+        void RunUpdateTokenizerFromLine(int lineIndex, List<TokenizerLineState> stany, FastColoredTextBox textBox)
+        {
+            TokenizerLineState beginState;
+            if (lineIndex -1 <= 0)
+                beginState = TokenizerLineState.tlsDefault;
+            else
+                beginState = stany[lineIndex - 1];
+
+            bool cont;
+            do
+            {
+                cont = true;
+                TokenizerLineState endState = TokenizeSingleLine(lineIndex, beginState, textBox);
+                if (endState == stany[lineIndex])
+                    cont = false;
+                else
+                {
+                    beginState = stany[lineIndex] = endState;
+                    lineIndex++;
+                }
+            }
+            while (cont);
+        }
+
+
         void Tokenize(int lineIndex, int state)
         {
+#if TO_JEST_TO_WYRZUCENIA_CHOCIAZ_MOZE_INSPIROWAC
             if (lineIndex >= 0 && lineIndex < textBox.LinesCount)
             {
                 // Utwórz zakres dla całej linii
@@ -334,6 +395,7 @@ namespace CodeEditor
                 }
 
             }
+#endif
         }
         /// <summary>
         /// Adding new line with starting State or if line already exist change state in existng line 
@@ -367,4 +429,16 @@ namespace CodeEditor
 
 
     }
+
+    enum TokenizerLineState
+    {
+        tlsUndefined = 0,
+        tlsDefault = 1,
+        tlsComment = 2,
+        tlsString = 3,
+        tlsDirective = 4,
+        tlsVMAsm = 5,
+        tlsSpecialProc = 6,
+        tlsVerifDirect = 7
+    }
 }
